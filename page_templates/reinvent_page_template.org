#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2025-04-14 Mon 22:59
#+OPTIONS: author:nil ^:{} H:4
#+HUGO_BASE_DIR: ~/code/org/ramsayleung.github.io
#+HUGO_SECTION: zh/post/2025
#+HUGO_CUSTOM_FRONT_MATTER: :toc true
#+HUGO_AUTO_SET_LASTMOD: t
#+HUGO_DRAFT: false
#+DATE: [2025-04-14 Mon 22:59]
#+TITLE: 重新造轮子系列(五)：正则表达式引擎
#+HUGO_TAGS: reinvent
#+HUGO_CATEGORIES: "ReInvent: 重新造轮子系列"
项目 GitHub 地址: [[https://github.com/ramsayleung/reinvent/tree/master/page_templates][Page Template]]
* 前言
  在现代网站开发里，内容与表现的分享已经成为基本准则(Separation of content and presentation),
  比如 HTML 就是负责内容展现，而 CSS 就是负责页面的样式。

  而手动更新和编写 HTML 也是一件费时费力并且容易出错的工作，尤其是需要同时修改多个页面的时候，
  因此有聪明的程序员就发明了名为静态网页生成器(static site generator)的技术，可以按需生成网页。

  事实上，互联网上的大多数页面都是通过某种形式的静态网页生成器生成出来的。

  而静态网页生成器的核心就是「模板引擎」，在过去三十年，诞生过无数的模板引擎，甚至有位加拿大的程序员为了更方便记录谁访问了他的简历，他还发明了一门编程语言来做模板引擎的活，这就是「世界上最好的编程语言：PHP」。

  PHP 可以算是web时代的王者之一，凭借着 =LAMP(Linux, Apache, MySql, PHP)= 架构不断开疆扩土，攻城掠地，而PHP本身也不断有新的框架被造出来，为谁是最好的「模板引擎」打得头破血流。

  虽然关于「模板引擎」的战争至今仍未停歇，但细分下来，「模板引擎」可以分成三个主要的流派：
** 嵌入式语法
   在 Markdown/HTML 这样的标识语言里面嵌入编程语言，使用 =<% %>= 等符号来标记代码与文本内容，其中的代表包括 Javascript 的 [[https://ejs.co/][EJS]], Ruby 的 [[https://docs.ruby-lang.org/en/2.3.0/ERB.html][ERB]], 以及 Python 的 [[https://jinja.palletsprojects.com/en/stable/][Jinja]]:
   #+begin_src js
     <!-- 用特殊标记混合JavaScript与HTML -->
     <% if (user) { %>
       <h1><%= user.name %></h1>
     <% } %>
   #+end_src

   其优点就是可以直接使用嵌入的编程语言，功能强大，学习成本低，缺点就是模板很容易变成混杂样式和逻辑的「屎山」代码
** 自定义语法
   不嵌入现成的编程语言，而是自己开发一套 mini 编程语言，或者叫 DSL(domain specifc language), 代表有 [[https://pages.github.com/][GitHub Page]] 用到的 [[https://jekyllrb.com/][Jekyll]], 还有 Golang 开发的著名静态网页生成器 [[https://gohugo.io/][Hugo]], 都是使用自定义的语法：
   #+begin_src ruby
     {% comment %} 自创模板语法 {% endcomment %}
     {% for post in posts %}
       {{ post.title | truncate: 30 }}
     {% endfor %}
   #+end_src

   优点就是语法简洁，缺点就是发展下去，可以又是自己造了一个新的编程语言，功能还不如通用的编程语言强大
** HTML指令
   不再在 HTML 中嵌入编程语言或DSL，取而代之的是直接给 HTML 定义特定的属性，不同的属性代表不同的含义，但是使用的还是标准 HTML.

   最著名的就是 [[https://vuejs.org/][Vuejs]]:
   #+begin_src html
     <!-- 用特殊属性实现逻辑 -->
     <div v-if="user">
       <h1>{{ user.name }}</h1>
     </div>
   #+end_src

   优点是保持HTML的合法性与简洁，不需要额外的 parser, 缺点就是指令功能受限，不如内嵌编程语言强大，生态工具较少。

   这次的模板引擎我们就会以这个流派为范式进行开发。
** PHP
   分析完三种流派，就会奇怪 PHP 究竟是属于哪个流派呢？

   #+begin_src php
     <h1><?php echo $title; ?></h1>
     <ul>
       <?php foreach ($items as $item) { ?>
         <li><?php echo $item; ?></li>
       <?php } ?>
     </ul>
   #+end_src

   其实 PHP 本质就是流派二，只是这门专门用于「模板引擎」的 mini 语言，最后演化成了一门专门的编程语言，只是这个编程语言最擅长的还是网页开发，即是做「模板引擎」。

   所以 PHP 是从流派二演化成流派一。
* 设计思路
  TODO
* stack frame
* vistor pattern
* 指令集
